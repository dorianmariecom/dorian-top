#!/usr/bin/env ruby
# frozen_string_literal: true

require "dorian/arguments"

parsed = Dorian::Arguments.parse(
  limit: { type: :integer, aliases: [:l, :n], default: 10 },
  shell: {
    type: :string,
    alias: :s,
    default: File.basename(ENV["SHELL"] || "bash")
  },
  version: { alias: :v },
  help: { alias: :h }
)

abort parsed.help if parsed.options.help

if parsed.options.version
  abort File.read(File.expand_path("../../VERSION", __FILE__))
end

HISTORY =
  case parsed.options.shell.to_s.downcase
  when "fish"
    File
      .read("#{Dir.home}/.local/share/fish/fish_history")
      .lines
      .grep(/^- cmd: /)
      .map { |line| line.split("- cmd: ", 2).last.strip }
  when "bash"
    File.read("#{Dir.home}/.bash_history").lines.map(&:strip)
  when "zsh"
    File.read("#{Dir.home}/.zsh_history").lines.map(&:strip)
  else
    raise NotImplementedError, parsed.options.shell.to_s.downcase
  end

puts(
  HISTORY
    .map(&:split)
    .map(&:first)
    .tally
    .to_a
    .sort_by(&:last)
    .reverse
    .map
    .with_index do |(command, command_count), index|
      "#{index + 1}\t" \
        "#{command_count}\t" \
        "#{(command_count * 100 / HISTORY.size.to_f).round(3)}%\t" \
        "#{command}"
    end
    .first(parsed.options.limit)
)
